[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Workouts",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "twilio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "twilio",
        "description": "twilio",
        "detail": "twilio",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "twilio.rest",
        "description": "twilio.rest",
        "isExtraImport": true,
        "detail": "twilio.rest",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ping_pong",
        "kind": 2,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "def ping_pong():\n    return jsonify('pong!')\n@app.route('/generate', methods=['GET'])\ndef generate_workout():\n    workouts = jsonify(gen_workout(MUSCLE, EXPERIENCE_LEVEL, EQUIPMENT))\n    return workouts\nif __name__ == '__main__':\n    app.run()",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "generate_workout",
        "kind": 2,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "def generate_workout():\n    workouts = jsonify(gen_workout(MUSCLE, EXPERIENCE_LEVEL, EQUIPMENT))\n    return workouts\nif __name__ == '__main__':\n    app.run()",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "MUSCLE",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "MUSCLE = \"Chest\"\nEXPERIENCE_LEVEL = \"Intermediate\"\n# EQUIPMENT = [\"Dumbbell\"]\nEQUIPMENT = \"Dumbbell\"\n# enable CORS\nCORS(app, resources={r'/*': {'origins': '*'}})\n# sanity check route\n@app.route('/ping', methods=['GET'])\ndef ping_pong():\n    return jsonify('pong!')",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "EXPERIENCE_LEVEL",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "EXPERIENCE_LEVEL = \"Intermediate\"\n# EQUIPMENT = [\"Dumbbell\"]\nEQUIPMENT = \"Dumbbell\"\n# enable CORS\nCORS(app, resources={r'/*': {'origins': '*'}})\n# sanity check route\n@app.route('/ping', methods=['GET'])\ndef ping_pong():\n    return jsonify('pong!')\n@app.route('/generate', methods=['GET'])",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "EQUIPMENT",
        "kind": 5,
        "importPath": "api.app",
        "description": "api.app",
        "peekOfCode": "EQUIPMENT = \"Dumbbell\"\n# enable CORS\nCORS(app, resources={r'/*': {'origins': '*'}})\n# sanity check route\n@app.route('/ping', methods=['GET'])\ndef ping_pong():\n    return jsonify('pong!')\n@app.route('/generate', methods=['GET'])\ndef generate_workout():\n    workouts = jsonify(gen_workout(MUSCLE, EXPERIENCE_LEVEL, EQUIPMENT))",
        "detail": "api.app",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "api.init_db",
        "description": "api.init_db",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\n# instantiate the app\napp = Flask(__name__)\napp.config.from_object(__name__)\n# DB Setup with SQLite\napp.config['SQLALCHEMY_DATABASE_URI'] =\\\n        'sqlite:///' + os.path.join(basedir, 'database.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)",
        "detail": "api.init_db",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.init_db",
        "description": "api.init_db",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(__name__)\n# DB Setup with SQLite\napp.config['SQLALCHEMY_DATABASE_URI'] =\\\n        'sqlite:///' + os.path.join(basedir, 'database.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)",
        "detail": "api.init_db",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "api.init_db",
        "description": "api.init_db",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)",
        "detail": "api.init_db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "api.init_db",
        "description": "api.init_db",
        "peekOfCode": "db = SQLAlchemy(app)",
        "detail": "api.init_db",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "api.load_csv_data",
        "description": "api.load_csv_data",
        "peekOfCode": "data = pd.read_csv(\"../megaGymDataset.csv\", index_col=0, delimiter=\",\")\ndf = pd.DataFrame(data)\ntry:\n    basedir = os.path.abspath(os.path.dirname(__file__))\n    # instantiate the app\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n    # DB Setup with SQLite\n    app.config['SQLALCHEMY_DATABASE_URI'] =\\\n            'sqlite:///' + os.path.join(basedir, 'database.db')",
        "detail": "api.load_csv_data",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "api.load_csv_data",
        "description": "api.load_csv_data",
        "peekOfCode": "df = pd.DataFrame(data)\ntry:\n    basedir = os.path.abspath(os.path.dirname(__file__))\n    # instantiate the app\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n    # DB Setup with SQLite\n    app.config['SQLALCHEMY_DATABASE_URI'] =\\\n            'sqlite:///' + os.path.join(basedir, 'database.db')\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False",
        "detail": "api.load_csv_data",
        "documentation": {}
    },
    {
        "label": "Workouts",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Workouts(db.Model):\n    id = db.Column(db.Integer, primary_key = True, autoincrement=True)\n    title = db.Column(db.String(100), nullable = False)\n    desc = db.Column(db.Text)\n    typeOfWorkout =db.Column(db.String(100))\n    bodyPart = db.Column(db.String(100))\n    equipment = db.Column(db.String(150))\n    level = db.Column(db.String(100))\n    rating = db.Column(db.Float)\n    # adding a string representation",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    profile_pic = db.Column(db.String(200), nullable=False)\n    def __repr__(self):\n        return f'<User {self.name}>'",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "gen_workout",
        "kind": 2,
        "importPath": "api.workouts",
        "description": "api.workouts",
        "peekOfCode": "def gen_workout(muscle_group, experience_level, equipment):\n    data = []\n    workouts = Workouts.query.filter(Workouts.bodyPart==muscle_group, Workouts.level==experience_level, Workouts.equipment==equipment).limit(5)\n    for w in workouts:\n        d = []\n        d.append(w.title)\n        d.append(w.bodyPart)\n        d.append(w.level)\n        data.append(d)\n    return data",
        "detail": "api.workouts",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "api.load_csv_data",
        "description": "api.load_csv_data",
        "peekOfCode": "data = pd.read_csv(\"../megaGymDataset.csv\", index_col=0, delimiter=\",\")\ndf = pd.DataFrame(data)\ntry:\n    basedir = os.path.abspath(os.path.dirname(__file__))\n    # instantiate the app\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n    # DB Setup with SQLite\n    app.config['SQLALCHEMY_DATABASE_URI'] =\\\n            'sqlite:///' + os.path.join(basedir, 'database.db')",
        "detail": "api.load_csv_data",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "api.load_csv_data",
        "description": "api.load_csv_data",
        "peekOfCode": "df = pd.DataFrame(data)\ntry:\n    basedir = os.path.abspath(os.path.dirname(__file__))\n    # instantiate the app\n    app = Flask(__name__)\n    app.config.from_object(__name__)\n    # DB Setup with SQLite\n    app.config['SQLALCHEMY_DATABASE_URI'] =\\\n            'sqlite:///' + os.path.join(basedir, 'database.db')\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False",
        "detail": "api.load_csv_data",
        "documentation": {}
    },
    {
        "label": "account_sid",
        "kind": 5,
        "importPath": "twilio.sms",
        "description": "twilio.sms",
        "peekOfCode": "account_sid = os.getenv('TWILIO_ACCOUNT_SID')\nauth_token = os.getenv('TWILIO_AUTH_TOKEN')\nclient = Client(account_sid, auth_token)\nmessage = client.messages \\\n                .create(\n                     body=\"Join Earth's mightiest heroes. Like Kevin Bacon.\",\n                     from_='+16052504952',\n                     to='+19515303820'\n                 )\nprint(message.sid)",
        "detail": "twilio.sms",
        "documentation": {}
    },
    {
        "label": "auth_token",
        "kind": 5,
        "importPath": "twilio.sms",
        "description": "twilio.sms",
        "peekOfCode": "auth_token = os.getenv('TWILIO_AUTH_TOKEN')\nclient = Client(account_sid, auth_token)\nmessage = client.messages \\\n                .create(\n                     body=\"Join Earth's mightiest heroes. Like Kevin Bacon.\",\n                     from_='+16052504952',\n                     to='+19515303820'\n                 )\nprint(message.sid)",
        "detail": "twilio.sms",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "twilio.sms",
        "description": "twilio.sms",
        "peekOfCode": "client = Client(account_sid, auth_token)\nmessage = client.messages \\\n                .create(\n                     body=\"Join Earth's mightiest heroes. Like Kevin Bacon.\",\n                     from_='+16052504952',\n                     to='+19515303820'\n                 )\nprint(message.sid)",
        "detail": "twilio.sms",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "twilio.sms",
        "description": "twilio.sms",
        "peekOfCode": "message = client.messages \\\n                .create(\n                     body=\"Join Earth's mightiest heroes. Like Kevin Bacon.\",\n                     from_='+16052504952',\n                     to='+19515303820'\n                 )\nprint(message.sid)",
        "detail": "twilio.sms",
        "documentation": {}
    }
]